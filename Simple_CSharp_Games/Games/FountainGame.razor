
@using Simple_CSharp_Games.Models

@inject IJSRuntime JS // Injecting JavaScript to use auto-focus on specific elements when rendered

<div class="fountain-game-container">
	@if (fountainGameState == null)
	{
		<div 
		class="fountain-startScreen"
		id="startScreen"
		tabindex="0"
		@onkeydown="StartScreenKeyHandler"
		>
			<p>Welcome to @GameTitle game!</p>
			<p>In this game, you will navigate a board and interact with various rooms.</p>
			<p>Select a board size to begin your adventure.</p>
			<p>
				Press s = small board<br />
				Press m = medium board<br />
				Press l = large board<br />
			</p> 
		</div>

	}
	@if(fountainGameState != null && fountainGameState.IsGameOver == false)
	{
		<p>You have selected a board size of: <strong>@SelectedBoardSize</strong></p>

		<div 
		class="fountain-gameBoard" 
		id="gameBoard"
		style="width: 100%; max-width: 400px; margin: 0 auto;"
		>
			@for (int i = 0; i < fountainGameState?.Board.Rows; i++)
			{
				<div class="gameBoard-row" style="display: flex; flex-direction: row; width: 100%;">
					@for (int j = 0; j < fountainGameState?.Board.Columns; j++)
					{
						var room = fountainGameState?.Board.Rooms[i, j];
						var isPlayerLocation = i == fountainGameState?.CurrentRow && j == fountainGameState?.CurrentColumn;
						string displayString;

						if (room != null && room == fountainGameState?.Board.Rooms[0, 0])
						{
							displayString = $"{room.Type.ToString()[0]}";
						}
						else if (isPlayerLocation)
						{
							displayString = "P";
						}
						else
						{
							displayString = ".";
						}

						<span style="flex: 1; min-width: 32px; height: 32px; border: 1px solid #555; display: flex; align-items: center; justify-content: center; text-align: center;">
							@displayString
						</span>
					}
				</div>
			}
		</div>

		<div 
		class="gameControls-wrapper"
		id="gameControls"
		style=""
		tabindex="0"
		@onkeydown="GameBoardKeyHandler">
			<h4><strong>Game Controls</strong></h4>
			<ol class="fountain-controls-list">
				<li><strong>ArrowUp</strong> – Move north</li>
				<li><strong>ArrowDown</strong> – Move south</li>
				<li><strong>ArrowLeft</strong> – Move west</li>
				<li><strong>ArrowRight</strong> – Move east</li>
				<li><strong>e</strong> – Enable fountain</li>
				<li><strong>d</strong> – Disable fountain</li>
				<li><strong>q</strong> – Quit game</li>
			</ol>
		</div>

		<p>The selected action is: <strong>@SelectedAction</strong>  </p>

		<p>The action result was: <strong>@ActionResultMessage</strong>  </p>




		@* When sense triggered show room sense return string *@
	}
	@if (fountainGameState != null && fountainGameState.IsGameOver)
	{
		<p>Gamed Over: <strong>@ActionResultMessage</strong></p>

		<button 
		class="btn btn-primary" 
		id="resetButton"
		tabindex="0" 
		@onclick="ResetGame"
		>
			Play Again
		</button>
	}
</div>

@code {
	private string GameTitle = "The Fountain of Objects";

	private string SelectedBoardSize = "";

	private string SelectedAction = "";

	private string ActionResultMessage = "";

	private FountainGameState? fountainGameState;

	// method to use imported interop function
	private async Task FocusInputAsync(string elementId)
	{
		await JS.InvokeVoidAsync("focusElementById", elementId);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		string componentId = "";
		if (firstRender && fountainGameState == null)
		{
			componentId = "startScreen";
		}
		if (fountainGameState != null && !fountainGameState.IsGameOver)
		{
			componentId = "gameControls";
		}
		if (fountainGameState != null && fountainGameState.IsGameOver)
		{
			componentId = "resetButton";
		}

		// Console.WriteLine($"OnAfterRenderAsync: focusing {componentId}");
		await FocusInputAsync(componentId);
	}

	//StartScreenKeyHandler and GameBoardKeyHandler
	private async Task StartScreenKeyHandler(KeyboardEventArgs e)
	{ 
		Console.WriteLine($"Key pressed: {e.Key}");

		string size = "";

		if (e.Key == "s")
		{
			size = "small";
		}
		if (e.Key == "m")
		{
			size = "medium";
		}
		if (e.Key == "l")
		{
			size = "large";
		}

		if (!string.IsNullOrEmpty(size))
		{
			SelectedBoardSize = size;
			StartGame();
		}
		await Task.CompletedTask;
	}

	private async Task GameBoardKeyHandler(KeyboardEventArgs e)
	{
		string action = "";
		if (e.Key == "ArrowUp")
		{
			action = "move north";
		}
		else if (e.Key == "ArrowDown")
		{
			action = "move south";
		}
		else if (e.Key == "ArrowLeft")
		{
			action = "move west";
		}
		else if (e.Key == "ArrowRight")
		{
			action = "move east";
		}
		else if (e.Key == "e")
		{
			action = "enable fountain";
		}
		else if (e.Key == "d")
		{
			action = "disable fountain";
		}
		else if (e.Key == "q")
		{
			action = "quit";
		}


		if (!string.IsNullOrEmpty(action))
		{
			SelectedAction = action;
			PlayerAction(action);
		}
		await Task.CompletedTask;

	}

	private void StartGame()
	{
		fountainGameState = new FountainGameState(SelectedBoardSize);
	}

	private void PlayerAction(string action)
	{
		SelectedAction = action;
		if (fountainGameState != null)
		{
			ActionResultMessage = fountainGameState.MovePlayer(action);
		}

	}

	private void ResetGame()
	{
		fountainGameState = null;
		SelectedBoardSize = "";
		SelectedAction = "";
		ActionResultMessage = "";
	}

}

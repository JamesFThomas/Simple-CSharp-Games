
@using Simple_CSharp_Games.Models

@inject IJSRuntime JS // Injecting JavaScript to use auto-focus on specific elements when rendered

<div class="fountain-game-container">
	@if (fountainGameState == null)
	{
		<div 
		class="fountain-startScreen"
		id="startScreen"
		tabindex="0"
		@onkeydown="StartScreenKeyHandler"
		>
			<p>Welcome to @GameTitle game!</p>
			<p>In this game, you will navigate a board and interact with various rooms.</p>
			<p>Select a board size to begin your adventure.</p>
			<p>
				Press s = small board<br />
				Press m = medium board<br />
				Press l = large board<br />
			</p> 
		</div>

	}
	@if(fountainGameState != null && fountainGameState.IsGameOver == false)
	{

		<p>Room Sense: <strong>@ActionResultMessage</strong>  </p>
		<div class="fountain-gameLayout">
			<div 
			class="fountain-gameBoard" 
			id="gameBoard"
			style="width: 100%; max-width: 400px; margin: 0 auto;"
			>
				@for (int i = 0; i < fountainGameState?.Board.Rows; i++)
				{
					<div class="gameBoard-row" style="display: flex; flex-direction: row; width: 100%;">
						@for (int j = 0; j < fountainGameState?.Board.Columns; j++)
						{
							var room = fountainGameState?.Board.Rooms[i, j];
							var isPlayerLocation = i == fountainGameState?.CurrentRow && j == fountainGameState?.CurrentColumn;
							string displayString;

							if (room != null && room == fountainGameState?.Board.Rooms[0,0])
							{
								displayString = $"{room.Type.ToString().Substring(0, 2)}";
							}
							else if (isPlayerLocation)
							{
								displayString = "P";
							}
							else
							{
								displayString = ".";
							}

							<span style="flex: 1; min-width: 32px; height: 32px; border: 1px solid #555; display: flex; align-items: center; justify-content: center; text-align: center;">
								@displayString
							</span>
						}
					</div>
				}
			</div>

			<details class="fountain-gameControls"
					 id="gameControls"
					 tabindex="0"
					 @onkeydown="GameBoardKeyHandler"
					 open>

				<summary><strong>Game Controls</strong></summary>

				<ul class="fountain-controlsList" >
					<li><kbd><i class="bi bi-arrow-up-short"></i></kbd> Move north</li>
					<li><kbd><i class="bi bi-arrow-down-short"></i> </kbd> Move south</li>
					<li><kbd><i class="bi bi-arrow-left-short"></i> </kbd> Move west</li>
					<li><kbd><i class="bi bi-arrow-right-short"></i></kbd> Move east</li>
					<li><kbd>e</kbd> Enable fountain</li>
					<li><kbd>d</kbd> Disable fountain</li>
					<li><kbd>q</kbd> Quit game</li>
				</ul>
			</details>
		</div>

		<details 
			class="fountain-instructions"
			 open
		>
			<summary><strong>Gameplay Instructions</strong></summary>
			<ul>
				<li>If the <strong>controls</strong> aren’t outlined in red, click/tab to enable keyboard input.</li>
				<li>Use arrow keys to move; <strong>e</strong> enables the Fountain, <strong>d</strong> disables, <strong>q</strong> quits.</li>
				<li>Always read the <strong>Room Sense</strong> text — it tells you what’s nearby.</li>
				<li>A draft means a deadly Pit is adjacent — move with caution.</li>
				<li>Entering a Pit ends the game immediately.</li>
				<li>Enable the Fountain, then return to the Entrance to win.</li>
			</ul>
		</details>

	}
	@if (fountainGameState != null && fountainGameState.IsGameOver)
	{
		<p>Game Over: <strong>@ActionResultMessage</strong></p>

		<button 
		class="btn btn-primary" 
		id="resetButton"
		tabindex="0" 
		@onclick="ResetGame"
		>
			Play Again
		</button>
	}
</div>

@code {
	private string GameTitle = "The Fountain of Objects";

	private string SelectedBoardSize = "";

	private string SelectedAction = "";

	private string ActionResultMessage = "";

	private string componentToFocus = "startScreen";

	private FountainGameState? fountainGameState;

	// method to use imported interop function
	private async Task FocusInputAsync(string elementId)
	{
		await JS.InvokeVoidAsync("focusElementById", elementId);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		
		if (!string.IsNullOrEmpty(componentToFocus))
		{
			await FocusInputAsync(componentToFocus);
		}
	}

	//StartScreenKeyHandler and GameBoardKeyHandler
	private async Task StartScreenKeyHandler(KeyboardEventArgs e)
	{ 
		Console.WriteLine($"Key pressed: {e.Key}");

		string size = "";

		if (e.Key == "s")
		{
			size = "small";
		}
		if (e.Key == "m")
		{
			size = "medium";
		}
		if (e.Key == "l")
		{
			size = "large";
		}

		if (!string.IsNullOrEmpty(size))
		{
			SelectedBoardSize = size;
			StartGame();
		}
		await Task.CompletedTask;
	}

	private async Task GameBoardKeyHandler(KeyboardEventArgs e)
	{
		string action = "";
		if (e.Key == "ArrowUp")
		{
			action = "move north";
		}
		else if (e.Key == "ArrowDown")
		{
			action = "move south";
		}
		else if (e.Key == "ArrowLeft")
		{
			action = "move west";
		}
		else if (e.Key == "ArrowRight")
		{
			action = "move east";
		}
		else if (e.Key == "e")
		{
			action = "enable fountain";
		}
		else if (e.Key == "d")
		{
			action = "disable fountain";
		}
		else if (e.Key == "q")
		{
			action = "quit";
		}


		if (!string.IsNullOrEmpty(action))
		{
			SelectedAction = action;
			PlayerAction(action);
		}
		await Task.CompletedTask;

	}

	private void StartGame()
	{
		fountainGameState = new FountainGameState(SelectedBoardSize);
		componentToFocus = "gameControls"; // Focus after game starts
	}

	private void PlayerAction(string action)
	{
		SelectedAction = action;
		if (fountainGameState != null)
		{
			ActionResultMessage = fountainGameState.MovePlayer(action);
			if (fountainGameState.IsGameOver)
			{
				componentToFocus = "resetButton"; // Focus the restart button
			}
		}

	}

	private void ResetGame()
	{
		componentToFocus = "startScreen"; // Focus back on size selector
		fountainGameState = null;
		SelectedBoardSize = "";
		SelectedAction = "";
		ActionResultMessage = "";
	}

}

@using Simple_CSharp_Games.Models;

<div class="game-container">
    @if (!gameState.IsGameOver)
    {
        @if (!showResult && !showManticoreAttack)
        {

            <h2>Hunting The Manticore</h2>

            <p class="m-2">Enter your range for the next shot</p>
            <div class="flex-row">
                <p>City Health:</p>
                <p>@gameState.City.Health</p>
            </div>
            <div class="flex-row">
                <p>Manticore Health:</p>
                <p>@gameState.Manticore.Health</p>
            </div>
            <div class="flex-row">
                <p>Round:</p>
                <p>@gameState.Round</p>
            </div>

            <input 
            type="number" 
            min="0" 
            max="100" 
            class="form-control mb-2" 
            placeholder="Enter cannon range (0-100)"
            @bind="guess" />

            <button class="btn btn-primary mb-2" onclick="@FireCannon">Fire Cannon</button>

            <div class="flex-row">
                <p>Shots:</p>
                <p>@gameState.Shots</p>
            </div>
        }
        @if (showResult && !showManticoreAttack )
        {
            @if ( gameState.Shots.Last().Result == "Short" )
            {
                <p class="m-2"> That shot fell short </p>
                <button class="btn btn-primary mb-2" onclick="@NextStep">next step</button>
            }
            @if (gameState.Shots.Last().Result == "Long")
            {
                <p class="m-2">That shot went long</p>
                <button class="btn btn-primary mb-2" onclick="@NextStep">next step</button>
            }
            @if (gameState.Shots.Last().Result == "Hit")
            {
                <p class="m-2">Direct Hit</p>
                <button class="btn btn-primary mb-2" onclick="@NextStep"> next step</button>
            }
        }
        @if (showManticoreAttack && !showResult )
        {
            <p class="m-2">The Manticore has hit the city</p>
            <button class="btn btn-primary mb-2" onclick="@NextShot">next shot</button>

        }

    }
    else
    {
        <h2>Game Over</h2>
        <p>@(gameState.Winner == "City" ? "Victory! The Manticore has been defeated!" : "Defeat! The Manticore has destroyed the city.")</p>
        <p class="m-2">The game has ended. Please refresh to play again.</p>

        <button class="btn btn-primary mb-2" onclick="@Restart">Play Again</button>

    }
</div>

@code {

    // All turn logic will happen in ManticoreGameState object the UI will simply display the state of the game.
    private ManticoreGameState gameState = new ManticoreGameState();

    private int guess;

    private bool showResult = false;

    private bool showManticoreAttack = false;

    private void FireCannon()
    {
        gameState.TakeTurn(guess);
        showResult = true;
    }

    private void NextStep()
    {
        showResult = false;
        showManticoreAttack = true;	
    }

    private void NextShot()
    {
        showManticoreAttack = false;
        guess = 0; // Reset the guess for the next shot
    }

    private void Restart()
    {
        showResult = false;
        showManticoreAttack = false;
        gameState.ResetGame();    
    }

}

@* Update Code for Blazor Page
// set starting values
int manticoreRange = 0;

// Player 1 sets the Manticore range
manticoreRange = SetManticoreRange();

// Player 2 starts the game
DefendTheCity(manticoreRange);

// 


// set manticore range
int SetManticoreRange()
{
    int userInput = 0;
    Console.Write("Player 1, how far away from the city do you want to station the Manticore?");
    userInput = Convert.ToInt32(Console.ReadLine());

    // check if input is in range 
    while ( userInput < 0 || userInput > 100)
    { 
        Console.WriteLine("The range mus be between 0 and 100.");
        userInput = Convert.ToInt32(Console.ReadLine());
    }

    // check if input is a number
    Console.Clear();
    return userInput;

}

// display game status

void DisplayGameStatus(int gameRound, int cityHealth, int manticoreHealth)
{
    string statusText = $"STATUS:  Round: {gameRound}  City: {cityHealth}/15   Manticore: {manticoreHealth}/10";
    Console.WriteLine(statusText);
}

// calculate cannon damage
int CalculateCannonDamage(int gameRound, int cannonDamage)
{
    if (gameRound % 15 == 0)
    {
        cannonDamage = 10;
    }
    else if (gameRound % 3 == 0 || gameRound % 5 == 0)
    {
        cannonDamage = 3;
    }
    else { 
        cannonDamage = 1;
    }
    return cannonDamage;
}

// display damage for the round
void DisplayExpectedDamage(int cannonDamage)
{
    string damageText = $"The cannon is expected to deal {cannonDamage} damage this round.";
    Console.WriteLine(damageText);
}

// set cannon range
int SetCannonRange(int cannonRange)
{
    int userInput;
    string rangeText = "Enter desired cannon range: ";

    Console.Write(rangeText);
    userInput = Convert.ToInt32(Console.ReadLine());

    if (userInput < 0 || userInput > 100)
    {
        Console.WriteLine("The cannon must be set between 0 and 100.");
        Console.Write(rangeText);
        userInput = Convert.ToInt32(Console.ReadLine());
    }

    cannonRange = userInput;

    return cannonRange;

}

(int manticoreHealth, int cityHealth) CalculateHealthDisplayRoundResults(
    int cannonRange, int manticoreRange, int manticoreHealth, int cityHealth, int cannonDamage)
{
    string shotResult;
    string shotText;

    // Calculate manticore health - use cannon range, manticore range, and cannon damage
    if (cannonRange < manticoreRange)
    {
        shotResult = "FELL SHORT OF";
        shotText = $"That round {shotResult} the target";
        Console.WriteLine(shotText);
    }
    else if (cannonRange > manticoreRange)
    {
        shotResult = "OVERSHOT";
        shotText = $"That round {shotResult} the target";
        Console.WriteLine(shotText);
    }
    else if (cannonRange == manticoreRange)
    {
        shotResult = "DIRECTLY HIT";
        manticoreHealth -= cannonDamage;
        shotText = $"That round {shotResult} the target";
        Console.WriteLine(shotText);
    }

    if (manticoreHealth > 0)
    {
        cityHealth -= 1;
    }

    return (manticoreHealth, cityHealth); // Return a tuple instead of an array
}

// method to calculate health 
void GameEndDisplay(int manticoreHealth, int cityHealth)
{

    if (manticoreHealth == 0)
    {
        Console.WriteLine("The Manitocore has been destroyed! The city of Consolas is safe!");
    }
    
    if (cityHealth == 0)
    {
        Console.WriteLine("The city of Consolas has been destroyed! The Manitocore is victorious!");
    }
}

// create emthod to run player 2 turns
void DefendTheCity(int manticoreRange)
{

    int gameRound, cityHealth, manticoreHealth, cannonRange, cannonDamage;
    Boolean isGameOver = false;

    gameRound = 1;
    cityHealth = 15;
    manticoreHealth = 10;
    cannonDamage = 1;
    cannonRange = 0;


       

    while (!isGameOver)
    {
        
        DisplayGameStatus(gameRound, cityHealth, manticoreHealth); // display the status

        cannonDamage = CalculateCannonDamage(gameRound, cannonDamage); // sets 1 || 3 || 10 
        
        DisplayExpectedDamage(cannonDamage); //display damage for current round

        cannonRange = SetCannonRange(cannonRange); // collects user 2 input 

        (manticoreHealth, cityHealth ) = CalculateHealthDisplayRoundResults(cannonRange, manticoreRange, manticoreHealth, cityHealth, cannonDamage); // calculates damage and displays results

        if (manticoreHealth <= 0 || cityHealth <= 0)
        {
            GameEndDisplay(manticoreHealth, cityHealth); // calculate health - not working 
            isGameOver = true; // set game over to true
        }

        gameRound++; // increment the round number

    }


} *@
@using Simple_CSharp_Games.Models
@using Simple_CSharp_Games.Models.FinalBattle

<div class="finalbattle-game-container">

	@if ( finalBattle.BattlePhase == BattlePhase.Setup )
	{
		<h1>@GameTitle</h1>
		// Add a input element to take user input for hero name
		<button class="btn btn-primary" @onclick="StartGame">Test Start</button>
	}

	@if (finalBattle.BattlePhase != BattlePhase.Outcome && finalBattle._battleGame.Winner == null)
	{

		<div class="battle-messages-container">
			@if (finalBattle.BattlePhase != BattlePhase.Setup)
			{
				<p> @finalBattle.CurrentTurnLabel </p>

				<p>@finalBattle.LastLogEntry</p>
			}

		</div>

		<div class="battle-parties-container">

			<div class="battle-heroes-container">
				@for (int i = 0; i < finalBattle._battleGame.Heroes.Count; i++)
				{
					var hero = finalBattle._battleGame.Heroes[i];
					<img 
					class="battle-avatar-image"
					src="@($"{GetAvatarUrl(hero.Type)}")"
					alt="@($"{hero.Name} Avatar Image")" 
					/>
					<p>@hero.Name</p>
					<p>hp: @hero.CurrentHP/@hero.MaxHP</p>
				}
			</div>

			<div class="battle-monsters-container">
				@for (int i = 0; i < finalBattle._battleGame.Monsters[finalBattle.CurrentMonsterPartyIndex].Count; i++)
				{
					var monster = finalBattle._battleGame.Monsters[finalBattle.CurrentMonsterPartyIndex][i];
					<img class="battle-avatar-image"
					src="@($"{GetAvatarUrl(monster.Type)}")"
					alt="@($"{monster.Name} Avatar Image")" />
					<p>@monster.Name</p>
					<p>hp: @monster.CurrentHP/@monster.MaxHP</p>
				}
			</div>
		</div>

		@* Use buttons to move game flow forward*@
		@if (finalBattle.BattlePhase == BattlePhase.HeroAwaitInput && finalBattle._battleGame.Winner == null)
		{
			@* Add Choices display when Heroes  to take inputs *@
			<button class="btn btn-primary" @onclick="HeroesTurn">Test Heroes</button>
		}

		@if (finalBattle.BattlePhase == BattlePhase.MonsterResolving && finalBattle._battleGame.Winner == null)
		{
			<button class="btn btn-primary" @onclick="MonstersTurn">Test Monsters</button>
		}


	}

	@if (finalBattle.BattlePhase == BattlePhase.Outcome && finalBattle._battleGame.Winner != null)
	{
		<div class="battle-winner-container">
			<p>Winner: @finalBattle._battleGame.Winner.Type</p>
			<p>@finalBattle.LastLogEntry</p>

			<button class="btn btn-primary" @onclick="PlayAgain">Play Again</button>

		</div>
	}

</div>

@code {
	private string GameTitle = "The Final Battle";

	BattleGameState finalBattle = new BattleGameState();

	private string? heroName;

	private List<string>? battleLog;


	private void StartGame()
	{
		heroName = "Game State Test";

		if (heroName != null)
			finalBattle.SetUp(heroName);

		battleLog = finalBattle.BattleLog;
	}

	private void PlayAgain()
	{
		finalBattle = new BattleGameState();

		finalBattle.BattlePhase = BattlePhase.Setup;
		finalBattle.ActiveHeroIndex = 0;
		finalBattle.CurrentMonsterPartyIndex = 0;

		finalBattle.BattleLog.Clear();
		finalBattle._battleGame.Winner = null;
		finalBattle.CurrentTurnLabel = "";

	}

	// update to take choice arguments form user inputs
	private void HeroesTurn()
	{
		// Get the current hero
		var hero = finalBattle._battleGame.Heroes[finalBattle.ActiveHeroIndex];

		// Pick the first available behavior for this hero
		// actionId will be replaced by a UI value from user input later. 
		var actionId = hero.Behaviors?.Keys.FirstOrDefault();

		if (string.IsNullOrWhiteSpace(actionId))
		{
			battleLog?.Add($"{hero.Name} has no available actions.");
			return;
		}

		// Find the first alive monster in the current wave
		var monsters = finalBattle._battleGame.Monsters[finalBattle.CurrentMonsterPartyIndex];

		var targetIndex = -1;

		for (int i = 0; i < monsters.Count; i++)
		{
			if (monsters[i].CurrentHP > 0)
			{
				targetIndex = i;
				break;
			}
		}

		if (targetIndex == -1)
		{
			battleLog?.Add("No valid monster targets remain in this wave.");
			return;
		}

		// Execute the hero action against the chosen target
		finalBattle.ResolveHeroAction(actionId, targetIndex.ToString());
	}

	private void MonstersTurn()
	{
		finalBattle.ResolveMonsterTurn();
	}

	private string GetAvatarUrl( CharacterTypes characterType)
	{
		return characterType switch
		{
			CharacterTypes.Hero => "/images/battle/hero_avatar.png",
			CharacterTypes.Fletcher => "/images/battle/fletcher_avatar.png",
			CharacterTypes.Skeleton => "/images/battle/skeleton_avatar.png",
			CharacterTypes.Uncoded => "/images/battle/uncoded_avatar.png",
			_ => "/images/battle/fletcher_avatar.png"
		};
	}
}
